{"ast":null,"code":"function _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nfunction _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == _typeof(i) ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != _typeof(i)) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\n/* eslint-disable */\nimport axios from 'axios';\nimport { ElMessage } from 'element-plus';\nimport router from '@/router';\n\n// 获取API基础URL\nvar apiBaseURL = process.env.VUE_APP_API_URL || 'http://localhost:8080/api';\n\n// 提取基础域名部分用于静态资源 - 重要：确保使用与后端相同的端口\nvar baseURL = 'http://localhost:8080';\n\n// 创建axios实例\nvar service = axios.create({\n  baseURL: apiBaseURL,\n  // 后端API基础URL\n  timeout: 15000,\n  // 请求超时时间\n  withCredentials: true,\n  // 允许跨域携带cookie\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// 导出基础域名供图片等静态资源使用\nexport var staticBaseURL = baseURL;\n\n// 请求拦截器\nservice.interceptors.request.use(function (config) {\n  console.log('===== 请求拦截 =====');\n  console.log('请求URL:', config.url);\n\n  // 从localStorage获取token\n  var token = localStorage.getItem('token');\n  console.log('Token存在?', !!token);\n\n  // 如果token存在，添加到请求头\n  if (token) {\n    config.headers['Authorization'] = \"Bearer \".concat(token);\n\n    // 添加调试日志，查看请求头中的Authorization\n    console.log('添加Authorization头:', \"Bearer \".concat(token.substring(0, 15), \"...\"));\n    console.log('Authorization头完整值:', \"Bearer \".concat(token));\n  } else {\n    console.warn('No token found in localStorage');\n  }\n\n  // 在开发环境下打印请求信息\n  if (process.env.NODE_ENV === 'development') {\n    console.log('API请求详情:', {\n      url: config.url,\n      method: config.method,\n      data: config.data,\n      params: config.params,\n      headers: config.headers\n    });\n  }\n  return config;\n}, function (error) {\n  console.error('请求错误:', error);\n  return Promise.reject(error);\n});\n\n// 响应拦截器\nservice.interceptors.response.use(function (response) {\n  console.log('===== 响应拦截 =====');\n  console.log('响应URL:', response.config.url);\n  console.log('响应状态码:', response.status);\n  console.log('响应数据:', response.data);\n  var res = response.data;\n\n  // 根据后端返回的状态码判断请求是否成功\n  if (res.code && res.code !== 200) {\n    // 日志记录\n    console.warn(\"\\u63A5\\u53E3\\u8FD4\\u56DE\\u9519\\u8BEF\\u7801: \".concat(res.code), response.config.url);\n    ElMessage({\n      message: res.message || '请求失败',\n      type: 'error',\n      duration: 3000\n    });\n\n    // 处理特定错误码\n    if (res.code === 401) {\n      // 未登录或者token过期\n      console.warn('接口返回401未授权:', response.config.url);\n      localStorage.removeItem('token');\n      localStorage.removeItem('user');\n\n      // 页面跳转到登录\n      router.push('/login');\n    }\n    return Promise.reject(new Error(res.message || '请求失败'));\n  } else {\n    return res;\n  }\n}, function (error) {\n  var _error$config, _error$response, _error$response2, _error$response$data;\n  console.error('响应错误: ', error);\n  console.log('错误响应详情:', {\n    url: (_error$config = error.config) === null || _error$config === void 0 ? void 0 : _error$config.url,\n    status: (_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status,\n    data: (_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : _error$response2.data\n  });\n  var message = '网络错误，请稍后重试';\n  if (error.response) {\n    switch (error.response.status) {\n      case 401:\n        message = '未授权，请重新登录';\n        console.warn('API请求401未授权:', error.config.url);\n        localStorage.removeItem('token');\n        localStorage.removeItem('user');\n        router.push('/login');\n        break;\n      case 403:\n        message = '拒绝访问';\n        break;\n      case 404:\n        message = '请求的资源不存在';\n        break;\n      case 500:\n        message = '服务器错误';\n        break;\n      default:\n        message = ((_error$response$data = error.response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.message) || \"\\u8BF7\\u6C42\\u5931\\u8D25: \".concat(error.response.status);\n    }\n  }\n  ElMessage({\n    message: message,\n    type: 'error',\n    duration: 3000\n  });\n  return Promise.reject(error);\n});\n\n// 封装请求方法\nexport var http = {\n  get: function get(url, params) {\n    var config = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    return service.get(url, _objectSpread({\n      params: params\n    }, config));\n  },\n  post: function post(url, data) {\n    var config = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    return service.post(url, data, config);\n  },\n  put: function put(url, data) {\n    var config = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    return service.put(url, data, config);\n  },\n  \"delete\": function _delete(url, params) {\n    var config = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    return service[\"delete\"](url, _objectSpread({\n      params: params\n    }, config));\n  }\n};\nexport default service;","map":{"version":3,"names":["axios","ElMessage","router","apiBaseURL","process","env","VUE_APP_API_URL","baseURL","service","create","timeout","withCredentials","headers","staticBaseURL","interceptors","request","use","config","console","log","url","token","localStorage","getItem","concat","substring","warn","NODE_ENV","method","data","params","error","Promise","reject","response","status","res","code","message","type","duration","removeItem","push","Error","_error$config","_error$response","_error$response2","_error$response$data","http","get","arguments","length","undefined","_objectSpread","post","put","delete"],"sources":["D:/code/project/WhaleTide-1/WhaleTide/wt-client-web/src/utils/request.js"],"sourcesContent":["/* eslint-disable */\r\nimport axios from 'axios'\r\nimport { ElMessage } from 'element-plus'\r\nimport router from '@/router'\r\n\r\n// 获取API基础URL\r\nconst apiBaseURL = process.env.VUE_APP_API_URL || 'http://localhost:8080/api';\r\n\r\n// 提取基础域名部分用于静态资源 - 重要：确保使用与后端相同的端口\r\nconst baseURL = 'http://localhost:8080';\r\n\r\n// 创建axios实例\r\nconst service = axios.create({\r\n  baseURL: apiBaseURL, // 后端API基础URL\r\n  timeout: 15000, // 请求超时时间\r\n  withCredentials: true, // 允许跨域携带cookie\r\n  headers: {\r\n    'Content-Type': 'application/json'\r\n  }\r\n})\r\n\r\n// 导出基础域名供图片等静态资源使用\r\nexport const staticBaseURL = baseURL;\r\n\r\n// 请求拦截器\r\nservice.interceptors.request.use(\r\n  config => {\r\n    console.log('===== 请求拦截 =====');\r\n    console.log('请求URL:', config.url);\r\n    \r\n    // 从localStorage获取token\r\n    const token = localStorage.getItem('token')\r\n    console.log('Token存在?', !!token);\r\n    \r\n    // 如果token存在，添加到请求头\r\n    if (token) {\r\n      config.headers['Authorization'] = `Bearer ${token}`\r\n      \r\n      // 添加调试日志，查看请求头中的Authorization\r\n      console.log('添加Authorization头:', `Bearer ${token.substring(0, 15)}...`);\r\n      console.log('Authorization头完整值:', `Bearer ${token}`);\r\n    } else {\r\n      console.warn('No token found in localStorage');\r\n    }\r\n    \r\n    // 在开发环境下打印请求信息\r\n    if (process.env.NODE_ENV === 'development') {\r\n      console.log('API请求详情:', {\r\n        url: config.url,\r\n        method: config.method,\r\n        data: config.data,\r\n        params: config.params,\r\n        headers: config.headers\r\n      })\r\n    }\r\n    \r\n    return config\r\n  },\r\n  error => {\r\n    console.error('请求错误:', error)\r\n    return Promise.reject(error)\r\n  }\r\n)\r\n\r\n// 响应拦截器\r\nservice.interceptors.response.use(\r\n  response => {\r\n    console.log('===== 响应拦截 =====');\r\n    console.log('响应URL:', response.config.url);\r\n    console.log('响应状态码:', response.status);\r\n    console.log('响应数据:', response.data);\r\n    \r\n    const res = response.data\r\n    \r\n    // 根据后端返回的状态码判断请求是否成功\r\n    if (res.code && res.code !== 200) {\r\n      // 日志记录\r\n      console.warn(`接口返回错误码: ${res.code}`, response.config.url);\r\n      \r\n      ElMessage({\r\n        message: res.message || '请求失败',\r\n        type: 'error',\r\n        duration: 3000\r\n      })\r\n      \r\n      // 处理特定错误码\r\n      if (res.code === 401) {\r\n        // 未登录或者token过期\r\n        console.warn('接口返回401未授权:', response.config.url);\r\n        localStorage.removeItem('token')\r\n        localStorage.removeItem('user')\r\n        \r\n        // 页面跳转到登录\r\n        router.push('/login')\r\n      }\r\n      \r\n      return Promise.reject(new Error(res.message || '请求失败'))\r\n    } else {\r\n      return res\r\n    }\r\n  },\r\n  error => {\r\n    console.error('响应错误: ', error)\r\n    console.log('错误响应详情:', {\r\n      url: error.config?.url,\r\n      status: error.response?.status,\r\n      data: error.response?.data\r\n    });\r\n    \r\n    let message = '网络错误，请稍后重试'\r\n    \r\n    if (error.response) {\r\n      switch (error.response.status) {\r\n        case 401:\r\n          message = '未授权，请重新登录'\r\n          console.warn('API请求401未授权:', error.config.url);\r\n          localStorage.removeItem('token')\r\n          localStorage.removeItem('user')\r\n          router.push('/login')\r\n          break\r\n        case 403:\r\n          message = '拒绝访问'\r\n          break\r\n        case 404:\r\n          message = '请求的资源不存在'\r\n          break\r\n        case 500:\r\n          message = '服务器错误'\r\n          break\r\n        default:\r\n          message = error.response.data?.message || `请求失败: ${error.response.status}`\r\n      }\r\n    }\r\n    \r\n    ElMessage({\r\n      message: message,\r\n      type: 'error',\r\n      duration: 3000\r\n    })\r\n    \r\n    return Promise.reject(error)\r\n  }\r\n)\r\n\r\n// 封装请求方法\r\nexport const http = {\r\n  get(url, params, config = {}) {\r\n    return service.get(url, { params, ...config })\r\n  },\r\n  post(url, data, config = {}) {\r\n    return service.post(url, data, config)\r\n  },\r\n  put(url, data, config = {}) {\r\n    return service.put(url, data, config)\r\n  },\r\n  delete(url, params, config = {}) {\r\n    return service.delete(url, { params, ...config })\r\n  }\r\n}\r\n\r\nexport default service "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}