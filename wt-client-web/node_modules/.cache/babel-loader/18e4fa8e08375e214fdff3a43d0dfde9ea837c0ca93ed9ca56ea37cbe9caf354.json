{"ast":null,"code":"/* eslint-disable */\nimport axios from 'axios';\nimport { ElMessage } from 'element-plus';\nimport router from '@/router';\n\n// 创建axios实例\nvar service = axios.create({\n  baseURL: 'http://localhost:8080/api',\n  // 后端API基础URL\n  timeout: 15000,\n  // 请求超时时间\n  withCredentials: true // 允许跨域携带cookie\n});\n\n// 请求拦截器\nservice.interceptors.request.use(function (config) {\n  // 从本地存储获取token并添加到请求头\n  var token = localStorage.getItem('token');\n  if (token) {\n    config.headers['Authorization'] = \"Bearer \".concat(token);\n  }\n  return config;\n}, function (error) {\n  console.error('请求错误: ', error);\n  return Promise.reject(error);\n});\n\n// 响应拦截器\nservice.interceptors.response.use(function (response) {\n  var res = response.data;\n\n  // 根据后端返回的状态码判断请求是否成功\n  if (res.code !== 200) {\n    ElMessage({\n      message: res.message || '请求失败',\n      type: 'error',\n      duration: 3000\n    });\n\n    // 处理特定错误码\n    if (res.code === 401) {\n      // 未登录或者token过期\n      localStorage.removeItem('token');\n      localStorage.removeItem('user');\n      router.push('/login');\n    }\n    return Promise.reject(new Error(res.message || '请求失败'));\n  } else {\n    return res;\n  }\n}, function (error) {\n  console.error('响应错误: ', error);\n  var message = '网络错误，请稍后重试';\n  if (error.response) {\n    switch (error.response.status) {\n      case 401:\n        message = '未授权，请重新登录';\n        localStorage.removeItem('token');\n        localStorage.removeItem('user');\n        router.push('/login');\n        break;\n      case 403:\n        message = '拒绝访问';\n        break;\n      case 404:\n        message = '请求的资源不存在';\n        break;\n      case 500:\n        message = '服务器错误';\n        break;\n      default:\n        message = \"\\u8BF7\\u6C42\\u5931\\u8D25: \".concat(error.response.data.message);\n    }\n  }\n  ElMessage({\n    message: message,\n    type: 'error',\n    duration: 3000\n  });\n  return Promise.reject(error);\n});\nexport default service;","map":{"version":3,"names":["axios","ElMessage","router","service","create","baseURL","timeout","withCredentials","interceptors","request","use","config","token","localStorage","getItem","headers","concat","error","console","Promise","reject","response","res","data","code","message","type","duration","removeItem","push","Error","status"],"sources":["D:/code/project/wt-client-web/src/utils/request.js"],"sourcesContent":["/* eslint-disable */\nimport axios from 'axios'\r\nimport { ElMessage } from 'element-plus'\r\nimport router from '@/router'\r\n\r\n// 创建axios实例\r\nconst service = axios.create({\r\n  baseURL: 'http://localhost:8080/api', // 后端API基础URL\r\n  timeout: 15000, // 请求超时时间\r\n  withCredentials: true // 允许跨域携带cookie\r\n})\r\n\r\n// 请求拦截器\r\nservice.interceptors.request.use(\r\n  config => {\r\n    // 从本地存储获取token并添加到请求头\r\n    const token = localStorage.getItem('token')\r\n    if (token) {\r\n      config.headers['Authorization'] = `Bearer ${token}`\r\n    }\r\n    return config\r\n  },\r\n  error => {\r\n    console.error('请求错误: ', error)\r\n    return Promise.reject(error)\r\n  }\r\n)\r\n\r\n// 响应拦截器\r\nservice.interceptors.response.use(\r\n  response => {\r\n    const res = response.data\r\n    \r\n    // 根据后端返回的状态码判断请求是否成功\r\n    if (res.code !== 200) {\r\n      ElMessage({\r\n        message: res.message || '请求失败',\r\n        type: 'error',\r\n        duration: 3000\r\n      })\r\n      \r\n      // 处理特定错误码\r\n      if (res.code === 401) {\r\n        // 未登录或者token过期\r\n        localStorage.removeItem('token')\r\n        localStorage.removeItem('user')\r\n        router.push('/login')\r\n      }\r\n      \r\n      return Promise.reject(new Error(res.message || '请求失败'))\r\n    } else {\r\n      return res\r\n    }\r\n  },\r\n  error => {\r\n    console.error('响应错误: ', error)\r\n    let message = '网络错误，请稍后重试'\r\n    \r\n    if (error.response) {\r\n      switch (error.response.status) {\r\n        case 401:\r\n          message = '未授权，请重新登录'\r\n          localStorage.removeItem('token')\r\n          localStorage.removeItem('user')\r\n          router.push('/login')\r\n          break\r\n        case 403:\r\n          message = '拒绝访问'\r\n          break\r\n        case 404:\r\n          message = '请求的资源不存在'\r\n          break\r\n        case 500:\r\n          message = '服务器错误'\r\n          break\r\n        default:\r\n          message = `请求失败: ${error.response.data.message}`\r\n      }\r\n    }\r\n    \r\n    ElMessage({\r\n      message: message,\r\n      type: 'error',\r\n      duration: 3000\r\n    })\r\n    \r\n    return Promise.reject(error)\r\n  }\r\n)\r\n\r\nexport default service "],"mappings":"AAAA;AACA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,SAAS,QAAQ,cAAc;AACxC,OAAOC,MAAM,MAAM,UAAU;;AAE7B;AACA,IAAMC,OAAO,GAAGH,KAAK,CAACI,MAAM,CAAC;EAC3BC,OAAO,EAAE,2BAA2B;EAAE;EACtCC,OAAO,EAAE,KAAK;EAAE;EAChBC,eAAe,EAAE,IAAI,CAAC;AACxB,CAAC,CAAC;;AAEF;AACAJ,OAAO,CAACK,YAAY,CAACC,OAAO,CAACC,GAAG,CAC9B,UAAAC,MAAM,EAAI;EACR;EACA,IAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;EAC3C,IAAIF,KAAK,EAAE;IACTD,MAAM,CAACI,OAAO,CAAC,eAAe,CAAC,aAAAC,MAAA,CAAaJ,KAAK,CAAE;EACrD;EACA,OAAOD,MAAM;AACf,CAAC,EACD,UAAAM,KAAK,EAAI;EACPC,OAAO,CAACD,KAAK,CAAC,QAAQ,EAAEA,KAAK,CAAC;EAC9B,OAAOE,OAAO,CAACC,MAAM,CAACH,KAAK,CAAC;AAC9B,CACF,CAAC;;AAED;AACAd,OAAO,CAACK,YAAY,CAACa,QAAQ,CAACX,GAAG,CAC/B,UAAAW,QAAQ,EAAI;EACV,IAAMC,GAAG,GAAGD,QAAQ,CAACE,IAAI;;EAEzB;EACA,IAAID,GAAG,CAACE,IAAI,KAAK,GAAG,EAAE;IACpBvB,SAAS,CAAC;MACRwB,OAAO,EAAEH,GAAG,CAACG,OAAO,IAAI,MAAM;MAC9BC,IAAI,EAAE,OAAO;MACbC,QAAQ,EAAE;IACZ,CAAC,CAAC;;IAEF;IACA,IAAIL,GAAG,CAACE,IAAI,KAAK,GAAG,EAAE;MACpB;MACAX,YAAY,CAACe,UAAU,CAAC,OAAO,CAAC;MAChCf,YAAY,CAACe,UAAU,CAAC,MAAM,CAAC;MAC/B1B,MAAM,CAAC2B,IAAI,CAAC,QAAQ,CAAC;IACvB;IAEA,OAAOV,OAAO,CAACC,MAAM,CAAC,IAAIU,KAAK,CAACR,GAAG,CAACG,OAAO,IAAI,MAAM,CAAC,CAAC;EACzD,CAAC,MAAM;IACL,OAAOH,GAAG;EACZ;AACF,CAAC,EACD,UAAAL,KAAK,EAAI;EACPC,OAAO,CAACD,KAAK,CAAC,QAAQ,EAAEA,KAAK,CAAC;EAC9B,IAAIQ,OAAO,GAAG,YAAY;EAE1B,IAAIR,KAAK,CAACI,QAAQ,EAAE;IAClB,QAAQJ,KAAK,CAACI,QAAQ,CAACU,MAAM;MAC3B,KAAK,GAAG;QACNN,OAAO,GAAG,WAAW;QACrBZ,YAAY,CAACe,UAAU,CAAC,OAAO,CAAC;QAChCf,YAAY,CAACe,UAAU,CAAC,MAAM,CAAC;QAC/B1B,MAAM,CAAC2B,IAAI,CAAC,QAAQ,CAAC;QACrB;MACF,KAAK,GAAG;QACNJ,OAAO,GAAG,MAAM;QAChB;MACF,KAAK,GAAG;QACNA,OAAO,GAAG,UAAU;QACpB;MACF,KAAK,GAAG;QACNA,OAAO,GAAG,OAAO;QACjB;MACF;QACEA,OAAO,gCAAAT,MAAA,CAAYC,KAAK,CAACI,QAAQ,CAACE,IAAI,CAACE,OAAO,CAAE;IACpD;EACF;EAEAxB,SAAS,CAAC;IACRwB,OAAO,EAAEA,OAAO;IAChBC,IAAI,EAAE,OAAO;IACbC,QAAQ,EAAE;EACZ,CAAC,CAAC;EAEF,OAAOR,OAAO,CAACC,MAAM,CAACH,KAAK,CAAC;AAC9B,CACF,CAAC;AAED,eAAed,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}