{"ast":null,"code":"var _excluded = [\"rightTableRef\"];\nfunction _objectWithoutProperties(e, t) { if (null == e) return {}; var o, r, i = _objectWithoutPropertiesLoose(e, t); if (Object.getOwnPropertySymbols) { var n = Object.getOwnPropertySymbols(e); for (r = 0; r < n.length; r++) o = n[r], -1 === t.indexOf(o) && {}.propertyIsEnumerable.call(e, o) && (i[o] = e[o]); } return i; }\nfunction _objectWithoutPropertiesLoose(r, e) { if (null == r) return {}; var t = {}; for (var n in r) if ({}.hasOwnProperty.call(r, n)) { if (-1 !== e.indexOf(n)) continue; t[n] = r[n]; } return t; }\nimport { createVNode, mergeProps, isVNode } from 'vue';\nimport Table from '../table-grid.mjs';\nfunction _isSlot(s) {\n  return typeof s === \"function\" || Object.prototype.toString.call(s) === \"[object Object]\" && !isVNode(s);\n}\nvar LeftTable = function LeftTable(props, _ref) {\n  var slots = _ref.slots;\n  if (!props.columns.length) return;\n  var rightTableRef = props.rightTableRef,\n    rest = _objectWithoutProperties(props, _excluded);\n  return createVNode(Table, mergeProps({\n    \"ref\": rightTableRef\n  }, rest), _isSlot(slots) ? slots : {\n    \"default\": function _default() {\n      return [slots];\n    }\n  });\n};\nvar RightTable = LeftTable;\nexport { RightTable as default };","map":{"version":3,"names":["props","columns","length","rightTableRef","rest","_objectWithoutProperties","_excluded","createVNode","Table","mergeProps","_isSlot","slots","default","RightTable","LeftTable"],"sources":["../../../../../../../packages/components/table-v2/src/renderers/right-table.tsx"],"sourcesContent":["import Table from '../table-grid'\n\nimport type { FunctionalComponent, Ref } from 'vue'\nimport type { TableV2GridProps } from '../grid'\nimport type { TableGridInstance } from '../table-grid'\n\ntype LeftTableProps = TableV2GridProps & {\n  rightTableRef: Ref<TableGridInstance | undefined>\n}\n\nconst LeftTable: FunctionalComponent<LeftTableProps> = (props, { slots }) => {\n  if (!props.columns.length) return\n\n  const { rightTableRef, ...rest } = props\n\n  return (\n    <Table ref={rightTableRef} {...rest}>\n      {slots}\n    </Table>\n  )\n}\n\nexport default LeftTable\n"],"mappings":";;;;;;;;gDAUM;EAAA,I;EAA2D,KAAAA,KAAA,CAAAC,OAAA,CAAAC,MAAA,EAAY;EAC3E,IAEMC,aAAA,GAAoBH,KAAA,CAApBG,aAAA;IAAAC,IAAA,GAAAC,wBAAA,CAAoBL,KAAA,EAAAM,SAAA;EAApB,OAANC,WAAA,CAAAC,KAAA,EAAAC,UAAA;IAEA,OAAAN;KACcC,IAAA,GAAAM,OAAA,CAAAC,KAAA,IAAAA,KAAA;IADd,oBAAAC,SAAA;MAAA,QAEKD,KAFL;IAAA;EAAA;AAAA;AAKD,IAAAE,UAAA,GAVDC,SAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}