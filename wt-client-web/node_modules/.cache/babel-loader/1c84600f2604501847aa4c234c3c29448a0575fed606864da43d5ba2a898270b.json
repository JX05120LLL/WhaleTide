{"ast":null,"code":"function _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nfunction _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == _typeof(i) ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != _typeof(i)) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\nimport { filterOption } from './helper.mjs';\nimport { inputProps } from '../../input/src/input.mjs';\nimport { buildProps, definePropType } from '../../../utils/vue/props/runtime.mjs';\nimport { isString, isFunction } from '@vue/shared';\nimport { UPDATE_MODEL_EVENT } from '../../../constants/event.mjs';\nvar mentionProps = buildProps(_objectSpread(_objectSpread({}, inputProps), {}, {\n  options: {\n    type: definePropType(Array),\n    \"default\": function _default() {\n      return [];\n    }\n  },\n  prefix: {\n    type: definePropType([String, Array]),\n    \"default\": \"@\",\n    validator: function validator(val) {\n      if (isString(val)) return val.length === 1;\n      return val.every(function (v) {\n        return isString(v) && v.length === 1;\n      });\n    }\n  },\n  split: {\n    type: String,\n    \"default\": \" \",\n    validator: function validator(val) {\n      return val.length === 1;\n    }\n  },\n  filterOption: {\n    type: definePropType([Boolean, Function]),\n    \"default\": function _default() {\n      return filterOption;\n    },\n    validator: function validator(val) {\n      if (val === false) return true;\n      return isFunction(val);\n    }\n  },\n  placement: {\n    type: definePropType(String),\n    \"default\": \"bottom\"\n  },\n  showArrow: Boolean,\n  offset: {\n    type: Number,\n    \"default\": 0\n  },\n  whole: Boolean,\n  checkIsWhole: {\n    type: definePropType(Function)\n  },\n  modelValue: String,\n  loading: Boolean,\n  popperClass: {\n    type: String,\n    \"default\": \"\"\n  },\n  popperOptions: {\n    type: definePropType(Object),\n    \"default\": function _default() {\n      return {};\n    }\n  }\n}));\nvar mentionEmits = _defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty({}, UPDATE_MODEL_EVENT, function (value) {\n  return isString(value);\n}), \"input\", function input(value) {\n  return isString(value);\n}), \"search\", function search(pattern, prefix) {\n  return isString(pattern) && isString(prefix);\n}), \"select\", function select(option, prefix) {\n  return isString(option.value) && isString(prefix);\n}), \"focus\", function focus(evt) {\n  return evt instanceof FocusEvent;\n}), \"blur\", function blur(evt) {\n  return evt instanceof FocusEvent;\n});\nexport { mentionEmits, mentionProps };","map":{"version":3,"names":["mentionProps","buildProps","_objectSpread","inputProps","options","type","definePropType","Array","default","prefix","String","validator","val","isString","length","every","v","split","filterOption","Boolean","Function","isFunction","placement","showArrow","offset","Number","whole","checkIsWhole","modelValue","loading","popperClass","popperOptions","Object","mentionEmits","_defineProperty","UPDATE_MODEL_EVENT","value","input","search","pattern","select","option","focus","evt","FocusEvent","blur"],"sources":["../../../../../../packages/components/mention/src/mention.ts"],"sourcesContent":["import {\n  buildProps,\n  definePropType,\n  isFunction,\n  isString,\n} from '@element-plus/utils'\nimport { UPDATE_MODEL_EVENT } from '@element-plus/constants'\nimport { inputProps } from '@element-plus/components/input'\nimport { filterOption } from './helper'\n\nimport type { ExtractPropTypes } from 'vue'\nimport type Mention from './mention.vue'\nimport type { MentionOption } from './types'\nimport type { Options } from '@element-plus/components/popper'\n\nexport const mentionProps = buildProps({\n  ...inputProps,\n  /**\n   * @description mention options list\n   */\n  options: {\n    type: definePropType<MentionOption[]>(Array),\n    default: () => [],\n  },\n  /**\n   * @description prefix character to trigger mentions. The string length must be exactly 1.\n   */\n  prefix: {\n    type: definePropType<string | string[]>([String, Array]),\n    default: '@',\n    validator: (val: string | string[]) => {\n      if (isString(val)) return val.length === 1\n      return val.every((v) => isString(v) && v.length === 1)\n    },\n  },\n  /**\n   * @description character to split mentions. The string length must be exactly 1.\n   */\n  split: {\n    type: String,\n    default: ' ',\n    validator: (val: string) => val.length === 1,\n  },\n  /**\n   * @description customize filter option logic.\n   */\n  filterOption: {\n    type: definePropType<false | typeof filterOption>([Boolean, Function]),\n    default: () => filterOption,\n    validator: (val) => {\n      if (val === false) return true\n      return isFunction(val)\n    },\n  },\n  /**\n   * @description set popup placement\n   */\n  placement: {\n    type: definePropType<'bottom' | 'top'>(String),\n    default: 'bottom',\n  },\n  /**\n   * @description whether the dropdown panel has an arrow\n   */\n  showArrow: Boolean,\n  /**\n   * @description offset of the dropdown panel\n   */\n  offset: {\n    type: Number,\n    default: 0,\n  },\n  /**\n   * @description when backspace is pressed to delete, whether the mention content is deleted as a whole\n   */\n  whole: Boolean,\n  /**\n   * @description when backspace is pressed to delete, check if the mention is a whole\n   */\n  checkIsWhole: {\n    type: definePropType<(pattern: string, prefix: string) => boolean>(\n      Function\n    ),\n  },\n  /**\n   * @description input value\n   */\n  modelValue: String,\n  /**\n   * @description whether the dropdown panel of mentions is in a loading state.\n   */\n  loading: Boolean,\n  /**\n   * @description custom class name for dropdown panel\n   */\n  popperClass: {\n    type: String,\n    default: '',\n  },\n  /**\n   * @description [popper.js](https://popper.js.org/docs/v2/) parameters\n   */\n  popperOptions: {\n    type: definePropType<Partial<Options>>(Object),\n    default: () => ({} as Partial<Options>),\n  },\n})\n\nexport const mentionEmits = {\n  [UPDATE_MODEL_EVENT]: (value: string) => isString(value),\n  input: (value: string) => isString(value),\n  search: (pattern: string, prefix: string) =>\n    isString(pattern) && isString(prefix),\n  select: (option: MentionOption, prefix: string) =>\n    isString(option.value) && isString(prefix),\n  focus: (evt: FocusEvent) => evt instanceof FocusEvent,\n  blur: (evt: FocusEvent) => evt instanceof FocusEvent,\n}\n\nexport type MentionEmits = typeof mentionEmits\nexport type MentionProps = ExtractPropTypes<typeof mentionProps>\nexport type MentionInstance = InstanceType<typeof Mention> & unknown\n\nexport type { MentionOption } from './types'\n"],"mappings":";;;;;;;;;;;AASY,IAACA,YAAY,GAAGC,UAAU,CAAAC,aAAA,CAAAA,aAAA,KACjCC,UAAU;EACbC,OAAO,EAAE;IACPC,IAAI,EAAEC,cAAc,CAACC,KAAK,CAAC;IAC3B,WAAS,SAATC,QAAOA,CAAA;MAAA,OAAQ,EAAE;IAAA;EACrB,CAAG;EACDC,MAAM,EAAE;IACNJ,IAAI,EAAEC,cAAc,CAAC,CAACI,MAAM,EAAEH,KAAK,CAAC,CAAC;IACrC,WAAS,GAAG;IACZI,SAAS,EAAE,SAAXA,SAASA,CAAGC,GAAG,EAAK;MAClB,IAAIC,QAAQ,CAACD,GAAG,CAAC,EACf,OAAOA,GAAG,CAACE,MAAM,KAAK,CAAC;MACzB,OAAOF,GAAG,CAACG,KAAK,CAAC,UAACC,CAAC;QAAA,OAAKH,QAAQ,CAACG,CAAC,CAAC,IAAIA,CAAC,CAACF,MAAM,KAAK,CAAC;MAAA,EAAC;IAC5D;EACA,CAAG;EACDG,KAAK,EAAE;IACLZ,IAAI,EAAEK,MAAM;IACZ,WAAS,GAAG;IACZC,SAAS,EAAE,SAAXA,SAASA,CAAGC,GAAG;MAAA,OAAKA,GAAG,CAACE,MAAM,KAAK,CAAC;IAAA;EACxC,CAAG;EACDI,YAAY,EAAE;IACZb,IAAI,EAAEC,cAAc,CAAC,CAACa,OAAO,EAAEC,QAAQ,CAAC,CAAC;IACzC,WAAS,SAATZ,QAAOA,CAAA;MAAA,OAAQU,YAAY;IAAA;IAC3BP,SAAS,EAAE,SAAXA,SAASA,CAAGC,GAAG,EAAK;MAClB,IAAIA,GAAG,KAAK,KAAK,EACf,OAAO,IAAI;MACb,OAAOS,UAAU,CAACT,GAAG,CAAC;IAC5B;EACA,CAAG;EACDU,SAAS,EAAE;IACTjB,IAAI,EAAEC,cAAc,CAACI,MAAM,CAAC;IAC5B,WAAS;EACb,CAAG;EACDa,SAAS,EAAEJ,OAAO;EAClBK,MAAM,EAAE;IACNnB,IAAI,EAAEoB,MAAM;IACZ,WAAS;EACb,CAAG;EACDC,KAAK,EAAEP,OAAO;EACdQ,YAAY,EAAE;IACZtB,IAAI,EAAEC,cAAc,CAACc,QAAQ;EACjC,CAAG;EACDQ,UAAU,EAAElB,MAAM;EAClBmB,OAAO,EAAEV,OAAO;EAChBW,WAAW,EAAE;IACXzB,IAAI,EAAEK,MAAM;IACZ,WAAS;EACb,CAAG;EACDqB,aAAa,EAAE;IACb1B,IAAI,EAAEC,cAAc,CAAC0B,MAAM,CAAC;IAC5B,WAAS,SAATxB,QAAOA,CAAA;MAAA,OAAS,EAAE;IAAA;EACtB;AAAG,EACF;AACW,IAACyB,YAAY,GAAAC,eAAA,CAAAA,eAAA,CAAAA,eAAA,CAAAA,eAAA,CAAAA,eAAA,CAAAA,eAAA,KACtBC,kBAAkB,EAAG,UAACC,KAAK;EAAA,OAAKvB,QAAQ,CAACuB,KAAK,CAAC;AAAA,aACzC,SAAPC,KAAKA,CAAGD,KAAK;EAAA,OAAKvB,QAAQ,CAACuB,KAAK,CAAC;AAAA,cACzB,SAARE,MAAMA,CAAGC,OAAO,EAAE9B,MAAM;EAAA,OAAKI,QAAQ,CAAC0B,OAAO,CAAC,IAAI1B,QAAQ,CAACJ,MAAM,CAAC;AAAA,cAC1D,SAAR+B,MAAMA,CAAGC,MAAM,EAAEhC,MAAM;EAAA,OAAKI,QAAQ,CAAC4B,MAAM,CAACL,KAAK,CAAC,IAAIvB,QAAQ,CAACJ,MAAM,CAAC;AAAA,aAC/D,SAAPiC,KAAKA,CAAGC,GAAG;EAAA,OAAKA,GAAG,YAAYC,UAAU;AAAA,YACnC,SAANC,IAAIA,CAAGF,GAAG;EAAA,OAAKA,GAAG,YAAYC,UAAU;AAAA,EAC1C","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}