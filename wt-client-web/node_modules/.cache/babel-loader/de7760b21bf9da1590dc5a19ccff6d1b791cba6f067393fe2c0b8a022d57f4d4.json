{"ast":null,"code":"import { ref, reactive, onMounted } from 'vue';\nimport { ElMessage } from 'element-plus';\nimport axios from 'axios';\nexport default {\n  name: 'UserAddress',\n  setup() {\n    const addressList = ref([]);\n    const addressDialogVisible = ref(false);\n    const dialogType = ref('add'); // 'add' or 'edit'\n    const addressFormRef = ref(null);\n\n    // 表单数据\n    const addressForm = reactive({\n      id: '',\n      name: '',\n      phone: '',\n      area: [],\n      province: '',\n      city: '',\n      district: '',\n      detailAddress: '',\n      postCode: '',\n      isDefault: false\n    });\n\n    // 表单验证规则\n    const rules = {\n      name: [{\n        required: true,\n        message: '请输入收货人姓名',\n        trigger: 'blur'\n      }, {\n        min: 2,\n        max: 20,\n        message: '长度在 2 到 20 个字符',\n        trigger: 'blur'\n      }],\n      phone: [{\n        required: true,\n        message: '请输入手机号',\n        trigger: 'blur'\n      }, {\n        pattern: /^1[3-9]\\d{9}$/,\n        message: '请输入正确的手机号码',\n        trigger: 'blur'\n      }],\n      area: [{\n        required: true,\n        message: '请选择所在地区',\n        trigger: 'change'\n      }],\n      detailAddress: [{\n        required: true,\n        message: '请输入详细地址',\n        trigger: 'blur'\n      }, {\n        min: 5,\n        max: 100,\n        message: '长度在 5 到 100 个字符',\n        trigger: 'blur'\n      }],\n      postCode: [{\n        pattern: /^\\d{6}$/,\n        message: '请输入正确的邮政编码',\n        trigger: 'blur'\n      }]\n    };\n\n    // 示例地区选项数据\n    // 实际项目中应该从后端获取完整的地区数据\n    const areaOptions = ref([{\n      value: '北京市',\n      label: '北京市',\n      children: [{\n        value: '北京市',\n        label: '北京市',\n        children: [{\n          value: '东城区',\n          label: '东城区'\n        }, {\n          value: '西城区',\n          label: '西城区'\n        }, {\n          value: '朝阳区',\n          label: '朝阳区'\n        }, {\n          value: '海淀区',\n          label: '海淀区'\n        }]\n      }]\n    }, {\n      value: '上海市',\n      label: '上海市',\n      children: [{\n        value: '上海市',\n        label: '上海市',\n        children: [{\n          value: '黄浦区',\n          label: '黄浦区'\n        }, {\n          value: '徐汇区',\n          label: '徐汇区'\n        }, {\n          value: '长宁区',\n          label: '长宁区'\n        }, {\n          value: '静安区',\n          label: '静安区'\n        }]\n      }]\n    }\n    // 实际项目中需要更多省市区数据\n    ]);\n\n    // 获取地址列表\n    const fetchAddressList = async () => {\n      try {\n        const response = await axios.get('/api/user/address/list');\n        if (response.data.code === 200) {\n          addressList.value = response.data.data;\n        } else {\n          ElMessage.error(response.data.message || '获取地址列表失败');\n        }\n      } catch (error) {\n        console.error('获取地址列表出错:', error);\n        ElMessage.error('网络错误，请稍后重试');\n      }\n    };\n\n    // 打开地址表单对话框\n    const showAddressDialog = (type, address) => {\n      dialogType.value = type;\n      addressDialogVisible.value = true;\n      resetAddressForm();\n      if (type === 'edit' && address) {\n        addressForm.id = address.id;\n        addressForm.name = address.name;\n        addressForm.phone = address.phone;\n        addressForm.area = [address.province, address.city, address.district];\n        addressForm.province = address.province;\n        addressForm.city = address.city;\n        addressForm.district = address.district;\n        addressForm.detailAddress = address.detailAddress;\n        addressForm.postCode = address.postCode;\n        addressForm.isDefault = address.isDefault;\n      }\n    };\n\n    // 重置表单\n    const resetAddressForm = () => {\n      if (addressFormRef.value) {\n        addressFormRef.value.resetFields();\n      }\n      addressForm.id = '';\n      addressForm.name = '';\n      addressForm.phone = '';\n      addressForm.area = [];\n      addressForm.province = '';\n      addressForm.city = '';\n      addressForm.district = '';\n      addressForm.detailAddress = '';\n      addressForm.postCode = '';\n      addressForm.isDefault = false;\n    };\n\n    // 提交地址表单\n    const submitAddressForm = async () => {\n      if (!addressFormRef.value) return;\n      await addressFormRef.value.validate(async valid => {\n        if (valid) {\n          // 从级联选择器的值中提取省市区\n          if (addressForm.area && addressForm.area.length === 3) {\n            addressForm.province = addressForm.area[0];\n            addressForm.city = addressForm.area[1];\n            addressForm.district = addressForm.area[2];\n          }\n          try {\n            let url = '/api/user/address/add';\n            let method = 'post';\n            let message = '添加地址成功';\n            if (dialogType.value === 'edit') {\n              url = '/api/user/address/update';\n              method = 'put';\n              message = '更新地址成功';\n            }\n            const response = await axios[method](url, addressForm);\n            if (response.data.code === 200) {\n              ElMessage.success(message);\n              addressDialogVisible.value = false;\n              fetchAddressList();\n            } else {\n              ElMessage.error(response.data.message || '操作失败');\n            }\n          } catch (error) {\n            console.error('地址操作出错:', error);\n            ElMessage.error('网络错误，请稍后重试');\n          }\n        } else {\n          return false;\n        }\n      });\n    };\n\n    // 删除地址\n    const deleteAddress = async id => {\n      try {\n        const response = await axios.delete(`/api/user/address/delete/${id}`);\n        if (response.data.code === 200) {\n          ElMessage.success('删除地址成功');\n          fetchAddressList();\n        } else {\n          ElMessage.error(response.data.message || '删除地址失败');\n        }\n      } catch (error) {\n        console.error('删除地址出错:', error);\n        ElMessage.error('网络错误，请稍后重试');\n      }\n    };\n\n    // 设置默认地址\n    const setDefaultAddress = async id => {\n      try {\n        const response = await axios.put(`/api/user/address/default/${id}`);\n        if (response.data.code === 200) {\n          ElMessage.success('设置默认地址成功');\n          fetchAddressList();\n        } else {\n          ElMessage.error(response.data.message || '设置默认地址失败');\n        }\n      } catch (error) {\n        console.error('设置默认地址出错:', error);\n        ElMessage.error('网络错误，请稍后重试');\n      }\n    };\n    onMounted(() => {\n      fetchAddressList();\n    });\n    return {\n      addressList,\n      addressDialogVisible,\n      dialogType,\n      addressForm,\n      addressFormRef,\n      rules,\n      areaOptions,\n      showAddressDialog,\n      submitAddressForm,\n      deleteAddress,\n      setDefaultAddress\n    };\n  }\n};","map":{"version":3,"names":["ref","reactive","onMounted","ElMessage","axios","name","setup","addressList","addressDialogVisible","dialogType","addressFormRef","addressForm","id","phone","area","province","city","district","detailAddress","postCode","isDefault","rules","required","message","trigger","min","max","pattern","areaOptions","value","label","children","fetchAddressList","response","get","data","code","error","console","showAddressDialog","type","address","resetAddressForm","resetFields","submitAddressForm","validate","valid","length","url","method","success","deleteAddress","delete","setDefaultAddress","put"],"sources":["D:\\code\\project\\wt-client-web\\src\\views\\user\\Address.vue"],"sourcesContent":["<template>\r\n  <div class=\"user-address\">\r\n    <el-card class=\"address-card\">\r\n      <template #header>\r\n        <div class=\"card-header\">\r\n          <h2>收货地址</h2>\r\n          <el-button type=\"primary\" @click=\"showAddressDialog('add')\">添加新地址</el-button>\r\n        </div>\r\n      </template>\r\n      \r\n      <div v-if=\"addressList.length > 0\" class=\"address-list\">\r\n        <el-card v-for=\"item in addressList\" :key=\"item.id\" class=\"address-item\" :class=\"{ 'default-address': item.isDefault }\">\r\n          <div class=\"address-content\">\r\n            <div class=\"address-info\">\r\n              <div class=\"address-header\">\r\n                <span class=\"name\">{{ item.name }}</span>\r\n                <span class=\"phone\">{{ item.phone }}</span>\r\n                <el-tag v-if=\"item.isDefault\" type=\"success\" size=\"small\">默认地址</el-tag>\r\n              </div>\r\n              <div class=\"address-detail\">\r\n                {{ item.province }} {{ item.city }} {{ item.district }} {{ item.detailAddress }}\r\n              </div>\r\n            </div>\r\n            <div class=\"address-actions\">\r\n              <el-button type=\"text\" @click=\"showAddressDialog('edit', item)\">编辑</el-button>\r\n              <el-popconfirm\r\n                title=\"确定要删除这个地址吗？\"\r\n                @confirm=\"deleteAddress(item.id)\"\r\n              >\r\n                <template #reference>\r\n                  <el-button type=\"text\" class=\"delete-btn\">删除</el-button>\r\n                </template>\r\n              </el-popconfirm>\r\n              <el-button \r\n                v-if=\"!item.isDefault\" \r\n                type=\"text\" \r\n                @click=\"setDefaultAddress(item.id)\"\r\n              >\r\n                设为默认\r\n              </el-button>\r\n            </div>\r\n          </div>\r\n        </el-card>\r\n      </div>\r\n      \r\n      <el-empty v-else description=\"暂无收货地址\" :image-size=\"200\"></el-empty>\r\n    </el-card>\r\n    \r\n    <!-- 地址表单对话框 -->\r\n    <el-dialog\r\n      :title=\"dialogType === 'add' ? '添加新地址' : '编辑地址'\"\r\n      v-model=\"addressDialogVisible\"\r\n      width=\"500px\"\r\n    >\r\n      <el-form :model=\"addressForm\" :rules=\"rules\" ref=\"addressFormRef\" label-width=\"80px\">\r\n        <el-form-item label=\"收货人\" prop=\"name\">\r\n          <el-input v-model=\"addressForm.name\" placeholder=\"请输入收货人姓名\"></el-input>\r\n        </el-form-item>\r\n        \r\n        <el-form-item label=\"手机号\" prop=\"phone\">\r\n          <el-input v-model=\"addressForm.phone\" placeholder=\"请输入手机号\"></el-input>\r\n        </el-form-item>\r\n        \r\n        <el-form-item label=\"所在地区\" prop=\"area\">\r\n          <el-cascader\r\n            v-model=\"addressForm.area\"\r\n            :options=\"areaOptions\"\r\n            placeholder=\"请选择省/市/区\"\r\n            :props=\"{ expandTrigger: 'hover' }\"\r\n          ></el-cascader>\r\n        </el-form-item>\r\n        \r\n        <el-form-item label=\"详细地址\" prop=\"detailAddress\">\r\n          <el-input\r\n            v-model=\"addressForm.detailAddress\"\r\n            type=\"textarea\"\r\n            :rows=\"2\"\r\n            placeholder=\"请输入详细地址，如街道、门牌号等\"\r\n          ></el-input>\r\n        </el-form-item>\r\n        \r\n        <el-form-item label=\"邮编\" prop=\"postCode\">\r\n          <el-input v-model=\"addressForm.postCode\" placeholder=\"请输入邮编（选填）\"></el-input>\r\n        </el-form-item>\r\n        \r\n        <el-form-item>\r\n          <el-checkbox v-model=\"addressForm.isDefault\">设为默认收货地址</el-checkbox>\r\n        </el-form-item>\r\n      </el-form>\r\n      <template #footer>\r\n        <span class=\"dialog-footer\">\r\n          <el-button @click=\"addressDialogVisible = false\">取消</el-button>\r\n          <el-button type=\"primary\" @click=\"submitAddressForm\">确定</el-button>\r\n        </span>\r\n      </template>\r\n    </el-dialog>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { ref, reactive, onMounted } from 'vue'\r\nimport { ElMessage } from 'element-plus'\r\nimport axios from 'axios'\r\n\r\nexport default {\r\n  name: 'UserAddress',\r\n  setup() {\r\n    const addressList = ref([])\r\n    const addressDialogVisible = ref(false)\r\n    const dialogType = ref('add') // 'add' or 'edit'\r\n    const addressFormRef = ref(null)\r\n    \r\n    // 表单数据\r\n    const addressForm = reactive({\r\n      id: '',\r\n      name: '',\r\n      phone: '',\r\n      area: [],\r\n      province: '',\r\n      city: '',\r\n      district: '',\r\n      detailAddress: '',\r\n      postCode: '',\r\n      isDefault: false\r\n    })\r\n    \r\n    // 表单验证规则\r\n    const rules = {\r\n      name: [\r\n        { required: true, message: '请输入收货人姓名', trigger: 'blur' },\r\n        { min: 2, max: 20, message: '长度在 2 到 20 个字符', trigger: 'blur' }\r\n      ],\r\n      phone: [\r\n        { required: true, message: '请输入手机号', trigger: 'blur' },\r\n        { pattern: /^1[3-9]\\d{9}$/, message: '请输入正确的手机号码', trigger: 'blur' }\r\n      ],\r\n      area: [\r\n        { required: true, message: '请选择所在地区', trigger: 'change' }\r\n      ],\r\n      detailAddress: [\r\n        { required: true, message: '请输入详细地址', trigger: 'blur' },\r\n        { min: 5, max: 100, message: '长度在 5 到 100 个字符', trigger: 'blur' }\r\n      ],\r\n      postCode: [\r\n        { pattern: /^\\d{6}$/, message: '请输入正确的邮政编码', trigger: 'blur' }\r\n      ]\r\n    }\r\n    \r\n    // 示例地区选项数据\r\n    // 实际项目中应该从后端获取完整的地区数据\r\n    const areaOptions = ref([\r\n      {\r\n        value: '北京市',\r\n        label: '北京市',\r\n        children: [\r\n          {\r\n            value: '北京市',\r\n            label: '北京市',\r\n            children: [\r\n              { value: '东城区', label: '东城区' },\r\n              { value: '西城区', label: '西城区' },\r\n              { value: '朝阳区', label: '朝阳区' },\r\n              { value: '海淀区', label: '海淀区' }\r\n            ]\r\n          }\r\n        ]\r\n      },\r\n      {\r\n        value: '上海市',\r\n        label: '上海市',\r\n        children: [\r\n          {\r\n            value: '上海市',\r\n            label: '上海市',\r\n            children: [\r\n              { value: '黄浦区', label: '黄浦区' },\r\n              { value: '徐汇区', label: '徐汇区' },\r\n              { value: '长宁区', label: '长宁区' },\r\n              { value: '静安区', label: '静安区' }\r\n            ]\r\n          }\r\n        ]\r\n      },\r\n      // 实际项目中需要更多省市区数据\r\n    ])\r\n    \r\n    // 获取地址列表\r\n    const fetchAddressList = async () => {\r\n      try {\r\n        const response = await axios.get('/api/user/address/list')\r\n        if (response.data.code === 200) {\r\n          addressList.value = response.data.data\r\n        } else {\r\n          ElMessage.error(response.data.message || '获取地址列表失败')\r\n        }\r\n      } catch (error) {\r\n        console.error('获取地址列表出错:', error)\r\n        ElMessage.error('网络错误，请稍后重试')\r\n      }\r\n    }\r\n    \r\n    // 打开地址表单对话框\r\n    const showAddressDialog = (type, address) => {\r\n      dialogType.value = type\r\n      addressDialogVisible.value = true\r\n      resetAddressForm()\r\n      \r\n      if (type === 'edit' && address) {\r\n        addressForm.id = address.id\r\n        addressForm.name = address.name\r\n        addressForm.phone = address.phone\r\n        addressForm.area = [address.province, address.city, address.district]\r\n        addressForm.province = address.province\r\n        addressForm.city = address.city\r\n        addressForm.district = address.district\r\n        addressForm.detailAddress = address.detailAddress\r\n        addressForm.postCode = address.postCode\r\n        addressForm.isDefault = address.isDefault\r\n      }\r\n    }\r\n    \r\n    // 重置表单\r\n    const resetAddressForm = () => {\r\n      if (addressFormRef.value) {\r\n        addressFormRef.value.resetFields()\r\n      }\r\n      \r\n      addressForm.id = ''\r\n      addressForm.name = ''\r\n      addressForm.phone = ''\r\n      addressForm.area = []\r\n      addressForm.province = ''\r\n      addressForm.city = ''\r\n      addressForm.district = ''\r\n      addressForm.detailAddress = ''\r\n      addressForm.postCode = ''\r\n      addressForm.isDefault = false\r\n    }\r\n    \r\n    // 提交地址表单\r\n    const submitAddressForm = async () => {\r\n      if (!addressFormRef.value) return\r\n      \r\n      await addressFormRef.value.validate(async (valid) => {\r\n        if (valid) {\r\n          // 从级联选择器的值中提取省市区\r\n          if (addressForm.area && addressForm.area.length === 3) {\r\n            addressForm.province = addressForm.area[0]\r\n            addressForm.city = addressForm.area[1]\r\n            addressForm.district = addressForm.area[2]\r\n          }\r\n          \r\n          try {\r\n            let url = '/api/user/address/add'\r\n            let method = 'post'\r\n            let message = '添加地址成功'\r\n            \r\n            if (dialogType.value === 'edit') {\r\n              url = '/api/user/address/update'\r\n              method = 'put'\r\n              message = '更新地址成功'\r\n            }\r\n            \r\n            const response = await axios[method](url, addressForm)\r\n            if (response.data.code === 200) {\r\n              ElMessage.success(message)\r\n              addressDialogVisible.value = false\r\n              fetchAddressList()\r\n            } else {\r\n              ElMessage.error(response.data.message || '操作失败')\r\n            }\r\n          } catch (error) {\r\n            console.error('地址操作出错:', error)\r\n            ElMessage.error('网络错误，请稍后重试')\r\n          }\r\n        } else {\r\n          return false\r\n        }\r\n      })\r\n    }\r\n    \r\n    // 删除地址\r\n    const deleteAddress = async (id) => {\r\n      try {\r\n        const response = await axios.delete(`/api/user/address/delete/${id}`)\r\n        if (response.data.code === 200) {\r\n          ElMessage.success('删除地址成功')\r\n          fetchAddressList()\r\n        } else {\r\n          ElMessage.error(response.data.message || '删除地址失败')\r\n        }\r\n      } catch (error) {\r\n        console.error('删除地址出错:', error)\r\n        ElMessage.error('网络错误，请稍后重试')\r\n      }\r\n    }\r\n    \r\n    // 设置默认地址\r\n    const setDefaultAddress = async (id) => {\r\n      try {\r\n        const response = await axios.put(`/api/user/address/default/${id}`)\r\n        if (response.data.code === 200) {\r\n          ElMessage.success('设置默认地址成功')\r\n          fetchAddressList()\r\n        } else {\r\n          ElMessage.error(response.data.message || '设置默认地址失败')\r\n        }\r\n      } catch (error) {\r\n        console.error('设置默认地址出错:', error)\r\n        ElMessage.error('网络错误，请稍后重试')\r\n      }\r\n    }\r\n    \r\n    onMounted(() => {\r\n      fetchAddressList()\r\n    })\r\n    \r\n    return {\r\n      addressList,\r\n      addressDialogVisible,\r\n      dialogType,\r\n      addressForm,\r\n      addressFormRef,\r\n      rules,\r\n      areaOptions,\r\n      showAddressDialog,\r\n      submitAddressForm,\r\n      deleteAddress,\r\n      setDefaultAddress\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n.user-address {\r\n  padding: 20px;\r\n}\r\n\r\n.address-card {\r\n  margin-bottom: 20px;\r\n}\r\n\r\n.card-header {\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n}\r\n\r\n.address-list {\r\n  display: grid;\r\n  grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));\r\n  gap: 20px;\r\n}\r\n\r\n.address-item {\r\n  position: relative;\r\n  transition: all 0.3s;\r\n}\r\n\r\n.default-address {\r\n  border: 2px solid #67C23A;\r\n}\r\n\r\n.address-content {\r\n  display: flex;\r\n  flex-direction: column;\r\n  min-height: 120px;\r\n}\r\n\r\n.address-info {\r\n  flex: 1;\r\n}\r\n\r\n.address-header {\r\n  margin-bottom: 10px;\r\n}\r\n\r\n.name {\r\n  font-weight: bold;\r\n  margin-right: 10px;\r\n  font-size: 16px;\r\n}\r\n\r\n.phone {\r\n  color: #606266;\r\n  margin-right: 10px;\r\n}\r\n\r\n.address-detail {\r\n  color: #606266;\r\n  line-height: 1.5;\r\n  margin-bottom: 15px;\r\n}\r\n\r\n.address-actions {\r\n  display: flex;\r\n  justify-content: flex-end;\r\n  margin-top: 10px;\r\n  border-top: 1px solid #EBEEF5;\r\n  padding-top: 10px;\r\n}\r\n\r\n.delete-btn {\r\n  color: #F56C6C;\r\n}\r\n</style> "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}