{"remainingRequest":"D:\\MyFile\\NewProject\\ghost-m-admin-web\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\MyFile\\NewProject\\ghost-m-admin-web\\src\\views\\order\\Statistics.vue?vue&type=style&index=0&id=696e84be&lang=scss&scoped=true","dependencies":[{"path":"D:\\MyFile\\NewProject\\ghost-m-admin-web\\src\\views\\order\\Statistics.vue","mtime":1744791067000},{"path":"D:\\MyFile\\NewProject\\ghost-m-admin-web\\node_modules\\css-loader\\dist\\cjs.js","mtime":1747114801135},{"path":"D:\\MyFile\\NewProject\\ghost-m-admin-web\\node_modules\\vue-loader\\lib\\loaders\\stylePostLoader.js","mtime":1747114802028},{"path":"D:\\MyFile\\NewProject\\ghost-m-admin-web\\node_modules\\postcss-loader\\src\\index.js","mtime":1747114801227},{"path":"D:\\MyFile\\NewProject\\ghost-m-admin-web\\node_modules\\sass-loader\\dist\\cjs.js","mtime":1747114800464},{"path":"D:\\MyFile\\NewProject\\ghost-m-admin-web\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1747114800727},{"path":"D:\\MyFile\\NewProject\\ghost-m-admin-web\\node_modules\\vue-loader\\lib\\index.js","mtime":1747114801604}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ci5maWx0ZXItY29udGFpbmVyIHsKICBwYWRkaW5nLWJvdHRvbTogMTVweDsKICBkaXNwbGF5OiBmbGV4OwogIGdhcDogMTBweDsKfQoKLmJveC1jYXJkIHsKICBtYXJnaW4tYm90dG9tOiAxNXB4Owp9CgouY2FyZC1jb250ZW50IHsKICB0ZXh0LWFsaWduOiBjZW50ZXI7CiAgcGFkZGluZzogMjBweCAwOwogIAogIC5zdGF0aXN0aWNzLW51bWJlciB7CiAgICBmb250LXNpemU6IDI4cHg7CiAgICBmb250LXdlaWdodDogYm9sZDsKICAgIGNvbG9yOiAjNDA5RUZGOwogICAgbWFyZ2luLWJvdHRvbTogNXB4OwogIH0KICAKICAuc3RhdGlzdGljcy1sYWJlbCB7CiAgICBmb250LXNpemU6IDE0cHg7CiAgICBjb2xvcjogIzYwNjI2NjsKICB9Cn0KCi5jaGFydC13cmFwcGVyIHsKICBoZWlnaHQ6IDM0MHB4OwogIHdpZHRoOiAxMDAlOwogIAogIC5jaGFydC1jb250YWluZXIgewogICAgaGVpZ2h0OiAxMDAlOwogICAgd2lkdGg6IDEwMCU7CiAgfQp9CgoucHJpY2UgewogIGNvbG9yOiAjZjU2YzZjOwogIGZvbnQtd2VpZ2h0OiBib2xkOwp9CgoudHJlbmRpbmctdXAgewogIGNvbG9yOiAjNjdDMjNBOwp9CgoudHJlbmRpbmctZG93biB7CiAgY29sb3I6ICNGNTZDNkM7Cn0K"},{"version":3,"sources":["Statistics.vue"],"names":[],"mappings":";AAgfA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA","file":"Statistics.vue","sourceRoot":"src/views/order","sourcesContent":["<template>\n  <div class=\"app-container\">\n    <div class=\"filter-container\">\n      <el-date-picker\n        v-model=\"timeRange\"\n        type=\"daterange\"\n        range-separator=\"至\"\n        start-placeholder=\"开始日期\"\n        end-placeholder=\"结束日期\"\n        value-format=\"yyyy-MM-dd\"\n        :picker-options=\"pickerOptions\"\n        style=\"width: 350px\"\n        @change=\"handleDateChange\"\n      />\n      <el-button v-waves type=\"primary\" icon=\"el-icon-search\" @click=\"fetchData\">\n        查询\n      </el-button>\n      <el-button v-waves icon=\"el-icon-refresh\" @click=\"resetFilter\">\n        重置\n      </el-button>\n    </div>\n\n    <el-row :gutter=\"20\">\n      <el-col :span=\"6\">\n        <el-card class=\"box-card\">\n          <div slot=\"header\" class=\"clearfix\">\n            <span>订单总数</span>\n          </div>\n          <div class=\"card-content\">\n            <div class=\"statistics-number\">{{ statistics.totalOrders }}</div>\n            <div class=\"statistics-label\">笔订单</div>\n          </div>\n        </el-card>\n      </el-col>\n      <el-col :span=\"6\">\n        <el-card class=\"box-card\">\n          <div slot=\"header\" class=\"clearfix\">\n            <span>成交金额</span>\n          </div>\n          <div class=\"card-content\">\n            <div class=\"statistics-number\">¥{{ statistics.totalAmount.toFixed(2) }}</div>\n            <div class=\"statistics-label\">总金额</div>\n          </div>\n        </el-card>\n      </el-col>\n      <el-col :span=\"6\">\n        <el-card class=\"box-card\">\n          <div slot=\"header\" class=\"clearfix\">\n            <span>商品销量</span>\n          </div>\n          <div class=\"card-content\">\n            <div class=\"statistics-number\">{{ statistics.totalItems }}</div>\n            <div class=\"statistics-label\">销售数量</div>\n          </div>\n        </el-card>\n      </el-col>\n      <el-col :span=\"6\">\n        <el-card class=\"box-card\">\n          <div slot=\"header\" class=\"clearfix\">\n            <span>客单价</span>\n          </div>\n          <div class=\"card-content\">\n            <div class=\"statistics-number\">¥{{ statistics.averageOrderValue.toFixed(2) }}</div>\n            <div class=\"statistics-label\">平均订单金额</div>\n          </div>\n        </el-card>\n      </el-col>\n    </el-row>\n\n    <el-row :gutter=\"20\" style=\"margin-top: 20px\">\n      <el-col :span=\"12\">\n        <el-card class=\"box-card\" style=\"height: 400px\">\n          <div slot=\"header\" class=\"clearfix\">\n            <span>销售趋势</span>\n            <el-radio-group v-model=\"salesChartType\" size=\"mini\" style=\"float: right\" @change=\"updateSalesChart\">\n              <el-radio-button label=\"daily\">日</el-radio-button>\n              <el-radio-button label=\"weekly\">周</el-radio-button>\n              <el-radio-button label=\"monthly\">月</el-radio-button>\n            </el-radio-group>\n          </div>\n          <div class=\"chart-wrapper\">\n            <div ref=\"salesChart\" class=\"chart-container\" />\n          </div>\n        </el-card>\n      </el-col>\n      <el-col :span=\"12\">\n        <el-card class=\"box-card\" style=\"height: 400px\">\n          <div slot=\"header\" class=\"clearfix\">\n            <span>订单状态分布</span>\n          </div>\n          <div class=\"chart-wrapper\">\n            <div ref=\"statusChart\" class=\"chart-container\" />\n          </div>\n        </el-card>\n      </el-col>\n    </el-row>\n\n    <el-row :gutter=\"20\" style=\"margin-top: 20px\">\n      <el-col :span=\"24\">\n        <el-card class=\"box-card\">\n          <div slot=\"header\" class=\"clearfix\">\n            <span>热销商品 Top 10</span>\n          </div>\n          <el-table\n            :data=\"statistics.topProducts\"\n            style=\"width: 100%\"\n            border\n            v-loading=\"loading\"\n          >\n            <el-table-column\n              label=\"排名\"\n              width=\"80\"\n              align=\"center\"\n            >\n              <template slot-scope=\"scope\">\n                <el-tag :type=\"getRankType(scope.$index)\">{{ scope.$index + 1 }}</el-tag>\n              </template>\n            </el-table-column>\n            <el-table-column\n              label=\"商品图片\"\n              width=\"120\"\n              align=\"center\"\n            >\n              <template slot-scope=\"scope\">\n                <el-image\n                  style=\"width: 60px; height: 60px\"\n                  :src=\"scope.row.image\"\n                  fit=\"cover\"\n                >\n                  <div slot=\"error\" class=\"image-slot\">\n                    <i class=\"el-icon-picture-outline\"></i>\n                  </div>\n                </el-image>\n              </template>\n            </el-table-column>\n            <el-table-column\n              prop=\"name\"\n              label=\"商品名称\"\n              min-width=\"200\"\n            />\n            <el-table-column\n              prop=\"price\"\n              label=\"单价\"\n              width=\"120\"\n              align=\"center\"\n            >\n              <template slot-scope=\"scope\">\n                <span class=\"price\">¥{{ scope.row.price.toFixed(2) }}</span>\n              </template>\n            </el-table-column>\n            <el-table-column\n              prop=\"salesCount\"\n              label=\"销量\"\n              width=\"100\"\n              align=\"center\"\n              sortable\n            />\n            <el-table-column\n              label=\"销售额\"\n              width=\"150\"\n              align=\"center\"\n            >\n              <template slot-scope=\"scope\">\n                <span class=\"price\">¥{{ (scope.row.price * scope.row.salesCount).toFixed(2) }}</span>\n              </template>\n            </el-table-column>\n            <el-table-column\n              fixed=\"right\"\n              label=\"操作\"\n              width=\"120\"\n              align=\"center\"\n            >\n              <template slot-scope=\"scope\">\n                <el-button \n                  type=\"text\" \n                  size=\"small\" \n                  @click=\"goToProduct(scope.row.id)\"\n                >\n                  商品详情\n                </el-button>\n              </template>\n            </el-table-column>\n          </el-table>\n        </el-card>\n      </el-col>\n    </el-row>\n  </div>\n</template>\n\n<script>\nimport * as echarts from 'echarts'\nimport waves from '@/directive/waves/index'\nimport { fetchOrderStatistics } from '@/api/order'\n\nexport default {\n  name: 'OrderStatistics',\n  directives: { waves },\n  data() {\n    return {\n      loading: false,\n      timeRange: [\n        this.getLastMonthDate(),\n        this.getCurrentDate()\n      ],\n      pickerOptions: {\n        shortcuts: [\n          {\n            text: '最近一周',\n            onClick(picker) {\n              const end = new Date()\n              const start = new Date()\n              start.setTime(start.getTime() - 3600 * 1000 * 24 * 7)\n              picker.$emit('pick', [start, end])\n            }\n          },\n          {\n            text: '最近一个月',\n            onClick(picker) {\n              const end = new Date()\n              const start = new Date()\n              start.setTime(start.getTime() - 3600 * 1000 * 24 * 30)\n              picker.$emit('pick', [start, end])\n            }\n          },\n          {\n            text: '最近三个月',\n            onClick(picker) {\n              const end = new Date()\n              const start = new Date()\n              start.setTime(start.getTime() - 3600 * 1000 * 24 * 90)\n              picker.$emit('pick', [start, end])\n            }\n          }\n        ]\n      },\n      salesChartType: 'daily',\n      salesChart: null,\n      statusChart: null,\n      statistics: {\n        totalOrders: 0,\n        totalAmount: 0,\n        totalItems: 0,\n        averageOrderValue: 0,\n        statusDistribution: {},\n        salesTrend: {},\n        topProducts: []\n      }\n    }\n  },\n  mounted() {\n    this.fetchData()\n    window.addEventListener('resize', this.handleResize)\n  },\n  beforeDestroy() {\n    window.removeEventListener('resize', this.handleResize)\n    if (this.salesChart) {\n      this.salesChart.dispose()\n    }\n    if (this.statusChart) {\n      this.statusChart.dispose()\n    }\n  },\n  methods: {\n    getCurrentDate() {\n      const date = new Date()\n      const year = date.getFullYear()\n      const month = (date.getMonth() + 1).toString().padStart(2, '0')\n      const day = date.getDate().toString().padStart(2, '0')\n      return `${year}-${month}-${day}`\n    },\n    getLastMonthDate() {\n      const date = new Date()\n      date.setMonth(date.getMonth() - 1)\n      const year = date.getFullYear()\n      const month = (date.getMonth() + 1).toString().padStart(2, '0')\n      const day = date.getDate().toString().padStart(2, '0')\n      return `${year}-${month}-${day}`\n    },\n    handleDateChange() {\n      // Will be triggered by the fetchData method\n    },\n    resetFilter() {\n      this.timeRange = [\n        this.getLastMonthDate(),\n        this.getCurrentDate()\n      ]\n      this.fetchData()\n    },\n    fetchData() {\n      this.loading = true\n      \n      const params = {\n        startDate: this.timeRange[0],\n        endDate: this.timeRange[1],\n        type: this.salesChartType\n      }\n      \n      fetchOrderStatistics(params).then(response => {\n        console.log('Statistics data:', response.data)\n        this.statistics = response.data\n        \n        // Default values if data is missing\n        if (!this.statistics.statusDistribution) {\n          this.statistics.statusDistribution = {\n            PENDING: 0,\n            PAID: 0,\n            SHIPPED: 0,\n            COMPLETED: 0,\n            CANCELLED: 0,\n            REFUNDED: 0\n          }\n        }\n        \n        if (!this.statistics.salesTrend) {\n          this.statistics.salesTrend = {\n            labels: [],\n            sales: [],\n            orders: []\n          }\n        }\n        \n        this.initCharts()\n        this.loading = false\n      }).catch(error => {\n        console.error('获取统计数据失败:', error)\n        this.$message.error('获取统计数据失败')\n        this.loading = false\n      })\n    },\n    initCharts() {\n      this.initSalesChart()\n      this.initStatusChart()\n    },\n    initSalesChart() {\n      if (this.salesChart) {\n        this.salesChart.dispose()\n      }\n      \n      const salesChartDom = this.$refs.salesChart\n      this.salesChart = echarts.init(salesChartDom)\n      \n      const { labels, sales, orders } = this.statistics.salesTrend\n      \n      const option = {\n        tooltip: {\n          trigger: 'axis',\n          axisPointer: {\n            type: 'cross',\n            crossStyle: {\n              color: '#999'\n            }\n          }\n        },\n        toolbox: {\n          feature: {\n            dataView: { show: true, readOnly: false },\n            magicType: { show: true, type: ['line', 'bar'] },\n            restore: { show: true },\n            saveAsImage: { show: true }\n          }\n        },\n        legend: {\n          data: ['销售额', '订单数']\n        },\n        xAxis: [\n          {\n            type: 'category',\n            data: labels,\n            axisPointer: {\n              type: 'shadow'\n            }\n          }\n        ],\n        yAxis: [\n          {\n            type: 'value',\n            name: '销售额',\n            min: 0,\n            axisLabel: {\n              formatter: '¥{value}'\n            }\n          },\n          {\n            type: 'value',\n            name: '订单数',\n            min: 0,\n            axisLabel: {\n              formatter: '{value}'\n            }\n          }\n        ],\n        series: [\n          {\n            name: '销售额',\n            type: 'bar',\n            data: sales\n          },\n          {\n            name: '订单数',\n            type: 'line',\n            yAxisIndex: 1,\n            data: orders\n          }\n        ]\n      }\n      \n      this.salesChart.setOption(option)\n    },\n    initStatusChart() {\n      if (this.statusChart) {\n        this.statusChart.dispose()\n      }\n      \n      const statusChartDom = this.$refs.statusChart\n      this.statusChart = echarts.init(statusChartDom)\n      \n      const { statusDistribution } = this.statistics\n      const statusData = Object.entries(statusDistribution).map(([status, count]) => ({\n        name: this.getStatusName(status),\n        value: count\n      }))\n      \n      const option = {\n        tooltip: {\n          trigger: 'item',\n          formatter: '{a} <br/>{b}: {c} ({d}%)'\n        },\n        legend: {\n          orient: 'vertical',\n          left: 10,\n          data: statusData.map(item => item.name)\n        },\n        color: ['#409EFF', '#67C23A', '#E6A23C', '#F56C6C', '#909399', '#9B59B6'],\n        series: [\n          {\n            name: '订单状态',\n            type: 'pie',\n            radius: ['50%', '70%'],\n            avoidLabelOverlap: false,\n            label: {\n              show: false,\n              position: 'center'\n            },\n            emphasis: {\n              label: {\n                show: true,\n                fontSize: '16',\n                fontWeight: 'bold'\n              }\n            },\n            labelLine: {\n              show: false\n            },\n            data: statusData\n          }\n        ]\n      }\n      \n      this.statusChart.setOption(option)\n    },\n    handleResize() {\n      if (this.salesChart) {\n        this.salesChart.resize()\n      }\n      if (this.statusChart) {\n        this.statusChart.resize()\n      }\n    },\n    updateSalesChart() {\n      this.fetchData()\n    },\n    getStatusName(status) {\n      const statusMap = {\n        PENDING: '待支付',\n        PAID: '已支付',\n        SHIPPED: '已发货',\n        COMPLETED: '已完成',\n        CANCELLED: '已取消',\n        REFUNDED: '已退款'\n      }\n      return statusMap[status] || status\n    },\n    getRankType(index) {\n      const types = ['danger', 'warning', 'success', '', '', '', '', '', '', '']\n      return types[index] || ''\n    },\n    goToProduct(id) {\n      this.$router.push({\n        path: `/product/detail/${id}`\n      })\n    }\n  }\n}\n</script>\n\n<style lang=\"scss\" scoped>\n.filter-container {\n  padding-bottom: 15px;\n  display: flex;\n  gap: 10px;\n}\n\n.box-card {\n  margin-bottom: 15px;\n}\n\n.card-content {\n  text-align: center;\n  padding: 20px 0;\n  \n  .statistics-number {\n    font-size: 28px;\n    font-weight: bold;\n    color: #409EFF;\n    margin-bottom: 5px;\n  }\n  \n  .statistics-label {\n    font-size: 14px;\n    color: #606266;\n  }\n}\n\n.chart-wrapper {\n  height: 340px;\n  width: 100%;\n  \n  .chart-container {\n    height: 100%;\n    width: 100%;\n  }\n}\n\n.price {\n  color: #f56c6c;\n  font-weight: bold;\n}\n\n.trending-up {\n  color: #67C23A;\n}\n\n.trending-down {\n  color: #F56C6C;\n}\n</style> "]}]}